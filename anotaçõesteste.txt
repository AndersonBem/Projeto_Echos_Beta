                                                                        Dia 01

                                                                Curso Django: Templates e boas práticas.
                                                                01.04 virtualenv

    1-  Criei uma pasta para o projeto e arrastei pro visualcode, depois !!!ctrl+j/!!! pra abrir o terminal
    2-  Na aula, os comandos do terminal são pra mac, vou anotar os do windows.
        Para ver a versão !!python -m virtualenv --version!!
        Para criar a venv !!python -m virtualenv venv!!
        !!Ctrl-L!! para limpar o terminal

    3-  Usei o comando para criar a venv e agora o comando para ativar a venv que é : !! venv/Scripts/activate   !!  

                                                        !!   
                                                        Essa ativação deu um erro que precisei da ajuda no forum da alura para resolver, é um problema no PowerShell:
                                                        O erro que está sendo apresentado está informando que a execução de script está desabilitada. Usando o terminal
                                                         aberto no VsCode estamos fazendo o uso do PowerShell. Será necessário realizar a liberação de execução de script
                                                          no PowerShell, para isso basta seguir os passos abaixo:
                                                        O link para duvida no forum é este:
                                                        https://cursos.alura.com.br/forum/topico-ativacao-do-projeto-esta-dando-erro-302126  

                                                        Abrir PowerShell como adm, usar o comando:
                                                          Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
                                                        Digitar S e enter
                                                        Voltar pro visual e ativar novamente com o venv/Scripts/activate 
                                                        !!
    4-  Agora vou instalar o Django na venv, isso vai fazer com que esse projeto tenha sempre a mesma versão e não causar bugs futuros. O comando foi pip install django.
                                                              
                                                                01.05 Servidor

    1-  pip freeze > requirements.txt Para salvar o que precisa para o projeto. Sempre que instalar algo com o pip, usar esse comando.

    2-  !!django-admin help!! mostra todos os comandos django

    3-  !!django-admin startproject setup .!! para começar o projeto, o setup . é padrão de nome do projeto
        Isso criou a pasta do projeto em si, com nome de setup, com os arquivos djangos.
        Dentro da pasta raiz do projeto,NÃO É A PASTA SETUP, apareceu o arquivo manage.py, ele é 
      responsavel por rodar varios comandos do django, além de subir o servidor.

    4-  !!python manage.py runserver!! para rodar o servidor    

                                      Dia 1,5
                                  Curso Django: Templates e boas práticas.
                                  02.02 idioma e timezone

    1-  O settings.py fica a configuração da aplicação 
        Lá alterei para pt-br e timezone para America/Sao_Paulo

                                  
                                     Dia 1,75 (Passar para o outro projeto)
                                Curso Django: Templates e boas práticas.
                                02.03 Variáveis de ambiente

    1- Todo projeto django tem uma secret key, para manter meu projeto no git, não posso
    enviar essa secret. Para coisas que n quero enviar pro git e deixar publicas, vamos
    criar variaveis de ambientes, que só são usadas no desenvolvimento de projetos. 

    2-  instalar o python dotenv com o pip !! pip install python-dotenv !! agora mandar pro 
    requirements.

    3-  Criei um arquivo na pasta raiz com nome de .env e coloquei a secret key lá.

    4- No setting, apagar a secret key deixando apenas SECRET_KEY = ''
    Preciso importar o os junto com os path, para poder conseguir manipular 
    os arquivos e importar o dotenv, assim : from dotenv import load_dotenv.
    Logo abaixo criar a função load_dotenv() para quando o arquivo for carregado
    ele carregar as variaveis de ambiente. 

    5-  Onde tinha a secre key, vc vai substituir por 
    SECRET_KEY = str(os.getenv('SECRET_KEY'))
      Aqui vc está transformando tudo em string, depois com os está entrando nos
    arquivos, depois ta mandando pegar (get) as variaveis de ambiente no .env
    e dizendo qual a variavel quer pegar. 

                                Dia 2
                      Curso Django: Templates e boas práticas.
                      02.04 Git e Github

    1-  No github criar um diretorio para o projeto.
    2-  Criar um arquivo .gitignore  
    3-  Ir no site (https://www.toptal.com/developers/gitignore/) e pegar do
    django           
    4-  No terminal "git init" para iniciar o diretorio do git e "git add ."
    5-  No terminal ainda "git commit -m "primeiro commit" " 
    6-  No github, pelar a linha git remote add origin e colar no terminal
        desse projeto git remote add origin  https://github.com/AndersonBem/alura_space_agosto.git
    7-  Terminal git push origin master

                              Dia 4
                      Curso Django: Templates e boas práticas.
                      03.02 : App e projeto     

    1-  Até agora criei a base do do projeto, agora vamos criar as partes que são
    as funcionalidades. 
        O nome dessas partes é app. 
    2-  Um projeto pode ter varios app's dentro dele. O startproject é para iniciar
    o projeto inteiro.
    3-  Começar criando o app de galeria, o objetivo é mandar tudo que tem relação
    com fotos no projeto. 

    4-  "python manage.py startapp galeria" Sempre que a gente alterar algo dentro
    da pasta galeria, eu to mexendo no app, não no projeto. 

    5-  Você precisa avisar ao projeto que esse app faz parte dele, precisa conectar
    o boneco lego na plataforma, você até agora criou os dois, mas n juntou eles. 


    6-  No setup.py ...
    
    !!!!!!!!!!!!(Que tem relação com o PROJETO
    -manage.py serve para rodar varios comandos e o projeto em si.
    -na pasta setup é onde está o projeto todo, a base.
    -a pasta galeria é onde ta o primeiro app que criei, com nome de galeria. 
    -O settings.py da pasta setup,fica a configuração do projeto como um todo, a base. 
    ) !!!!!!!!!!

      ... tem um dicionario com nome INSTALLED_APPS, lá eu preciso colocar os 
    app's que eu criar. No é só colocar 'galeria', 


                                  Dia 05
                          Curso Django: Templates e boas práticas.
                      03.03 : views e urls

    1-  Eu quero colocar alguma exibição na pagina, para alterar isso, eu preciso
    alterar algum app, não o programa em si, então vou no app que tenho que é o 
    galeria. Nele vou em views.py, ele é reponsavel por definir que informações 
    vão ser exibidas na tela para cada requisição. 

    2-  Nele vou importar o from django.http import HttpResponse, a função dele
    é responder as requisições que vem do http. 

    3-  Vou criar a função de nome index, pq vai ser a pagina principal e nela 
    vou instanciar o request, pq ela vai responder a uma requisição do http

    4-  Vou usar o HttpResponse e colar um codigo html lá dentro, apenas para teste

          def index(request):
            return HttpResponse('<h1>Alura Space</h>')

    5-  Isso é como um Path do Flask, vc definio a rota para a função index, mas 
    vc precisa avisar ao django disso. Por isso você tem que ir em setup e de lá
    usar o arquivo urls.py

          1- app/views.py lá vc cria a função que deseja para criar uma route
          2- setup/urls.py Ai vc avisa ao django que criou essa route e quando deve 
          responder com ela. 
    
    6-  Em views.py vai ter o dicionario urlpatterns, que é onde vc tem que botar
    as routes que vc criou, no caso vai ficar assim:
          urlpatterns = [
              path('admin/', admin.site.urls),
              path('', index),
          ]

    7-  Mas para ter a função index disponivel, vc precisa importar ela:
          from galeria.views import index

                          Curso Django: Templates e boas práticas.
                      03.04 : isolando as urls

    1-  Se vc deixar todos as routes de todos os app que criar dentro dessa urls.py
    do django, ele vai ficar gigantesco, então preciso criar um arquivo urls.py na
    mão para cada app criado e assim separar de maneira mais organizada as routes de
    cada aplicação
    2-  Em galeria, criar arquivo urls.py nela vc vai por os importes que vai usar,
    que são parecido com do urls.py de setup:
          from django.urls import path
          from galeria.views import index

    3-  Depois como no outro, criei um dicionario para as routes deste app, no caso 
    galeria. Então ficou assim:
          urlpatterns = [
              path('',index)
          ]  

    4-  No urls.py do setup, vc vai tirar aquele caminho e import de antes e colocar
    o include, assim ele vai buscar tudo que tiver na app de galeria.urls

          from django.contrib import admin
          from django.urls import path, include


          urlpatterns = [
              path('admin/', admin.site.urls),
              path('', include('galeria.urls')),
          ]

    5-  Então a nova sequencia de criação de uma route é :

            1- app/views.py lá vc cria a função que deseja para criar uma route
            2- app/urls.py Ai vc criar ou colocar no dicionarios urlpatterns a route
            que vc quer como resposta, usando o path... path('', index)
            3- No urls.py de setup, se não tiver o include desse app, vc precisa fazer
            path('', include('galeria.urls')),

    
                          Curso Django: Templates e boas práticas.
                      03.05 : Templates

    1- Agora que sei como criar uma route, vou poder vincular um html a essa route
    2- Você precisa dizer pro django onde ficam as paginas html, logo vc precisa ir 
    no setup.setting. Em no dicionario de template, tem o dirs, que são os diretorios
    que ficam os template.  
    3- Crio a pasta templates na raiz do projeto e vou lá no dirs para avisar a ele
    usando o os:
        [os.path.join(BASE_DIR,'templates')]
        o os é para entrar nos arquivos, path indica o caminho, join é a função que ta
        buscando, o BASE_DIR é o diretorio base do projeto e 'templates' é pasta que to
        direcionando. 

    4-  Na pasta template vc cria o index.html
    5-  Agora vc precisa ir na função do index, para avisar para ela renderizar isto
    6-  Na views.py do APP, vc vai alterar para isto:
          
          from django.shortcuts import render


          def index(request):
              return render(request, 'index.html')

        Vamos usar só o render, que vc começa pelo request sempre e depois o html que
        quer. 



                                    Dia 06
                          Curso Django: Templates e boas práticas.
                      04.03/04 : carregando o template/ arquivos estáticos
    1-  Baixei os arquivos da aula. 
    2-  Criei a pasta galeria dentro de templates, para organizar melhor o projeto.
    Então em views.py de galeria, eu alterei o destino para galeria/index.html
    3-  Abri o html de index que baixei e colei o codigo no index do projeto, ainda falta
    o css. 
    4-  em settings.py do setup (pq estou falando pro programa como um todo, não para
    o app especifico) vou criar uma lista dizendo onde vai ficar os arquivos estaticos.
    Irei fazer isso logo apos o STATIC_URL. Primeiro em setup, eu crio um diretorio
    chamado static. Ai no setting.py, faço:
            STATICFILES_DIRS=[
                os.path.join(BASE_DIR, 'setup/static')
            ] 
        Isso ta dizendo pro os acessar o caminho diretorio base, procurar setup/static

    5-  Agora é receita de bolo, logo abaixo do anterior:

            STATIC_ROOT = os.path.join(BASE_DIR,'static')

        Caminho absoluto para o python onde ele vai coletar os arquivos. é protocolo

    6-  Copiar a pasta assets e styles que baixei para dentro da pasta setup/static       
    7-  No terminal, usar o comando python manage.py collectstatic para o django organizar
    tudo e criar um novo dir static na base.  
    8-  No html, mando ele carregar os arquivos estaticos com {% load static %} logo no começo
    do arquivo.  No html ainda, no href do style, vai ficar assim: href="{% static '/styles/style.css' %}"
    Assim to avisando  qual o caminho do arquivo estatico que quero usar e o nome dele.
        
                                    Dia 08
                        Curso Django: Templates e boas práticas.
                      04.05/06 : carregando as imagens/Outras Paginas
    1-  Quando eu copiei o static da aula, veio o styles com os css e os assetes 
    que são as imagens, elas já estão referenciadas no html que eu copiei. Vou alterar
    apenas como ta escrito no html, para ele conseguir acessar as imagens. Então se 
    eu quiser colocar uma imagem no html, então preciso referenciar da seguinte forma:

        1-  "{% static ' o caminho ' %}"
            ex: <img src="{% static '/assets/ícones/1x/Home - ativo.png' %}">


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!IMPORTANTE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    2-  Vamos ver como criar outras paginas no mesmo site, vai usar o mesmo app galeria
    isso pode indicar que devo só usar um app e trocar o nome dele de index pra echos.
        
        1-  Crei o html da outra pasta dentro do templates/galeria com nome de imagem.html
        Colei o codigo da aula lá.   
        2-  Em views.py DO APP, vamos criar outra função para exibir essa pagina.

            def imagem(request):
                return render(request, 'galeria/imagem.html') 
        3-  Agora preciso criar uma route para essa pagina. 
        4-  Em urls.py DO APP. vc precisa add essa função do dicionario de routes 
        do app. Primeiro importar a função que foi criada e fazer esta route:
                    path('imagem/', imagem)    
            Cuitado que é o nome seguido de / não o oposto
        5-  Pronto, a route esta criada, agora vou carregar os estilos dentro desse html
        e as imagens tbm.


                        Curso Django: Templates e boas práticas.
                      05.02 : URL name

    1-  Os caminhos do html precisão ser dessa forma:
        
        1-  Você precisa ir no path, que está no dicionario de urls.py DO APP e 
        nesse path, voce precisa dar um nome a ele. EX:
                path('imagem/', imagem, name='imagem'),
        2-  A referencia no html vai ficar assim :
                href="{% url 'imagem' %}"
        3-  Com CTRL+F posso pesquisar todos e substituir todos. 
        4-  Preciso fazer isso em todos os caminhos, como o HOME para Voltar
        5-  Da o name para o path do index
        6- Nos html, trocar o caminho para o correto. href="{% url 'index' %}"
                        
                                    Dia 10
                        Curso Django: Templates e boas práticas.
                      05.03 : BASE e DRY

    1-  Vamos tirar as repetições dos html

        1-  Em templates/galeria vou criar base.html
        2-  Lá Eu vou colocar tudo que for repetido do index e de imagem   
        3-  Lá vou começar com {% load static %} fechar as tags que faltam(body e html)
        e dentro do body vou colocar {% block content %} {% endblock %} isso ta jogando os
        outros html no base.
        4-  Nós outros html vou começar com:

                {% extends 'galeria/base.html' %}
                {% load static %}
                {% block content %}
        Onde to avisando de onde vem o arquivo, carregando os estaticos e dizendo onde fica
        o arquivo base.
        5-  No final dos htmls, colocar o {% endblock %}

                      Curso Django: Templates e boas práticas.
                      05.04 : Partials
    1-  Vamos tirar as repetições dos html em relação de menu, botões e etc.

        1-  Vou criar uma pasta dentro de templates/galeria de nome partials
        2-  Lá dentro criar o _footer.html
        3-  Dentro, eu vou colar o footer que se repete e começar esse arquivo com
        {% load static %}
        4-  Como esse footer vai se repetir, eu posso ir no base.html
        5-  No base, dentro do body, eu vou usar o include {% include 'galeria/partials/_footer.html' %}
        6-  Fazer o mesmo para o menu e o cabeçalho, com nomes de 
        _header.html para o cabeçalho
        _sidebar.html para o menu lateral
        _footer.html para o rodapé
        7-  Lembrar que no header, precisa vir tudo do começo ou passar o começo pro base
        












