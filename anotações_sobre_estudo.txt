                                                                Dia 1 para referencia das anotações.

    1- Até agora criei a pasta do projeto, criei a maquina virtual venv, instalei o django e fiz o txt requirements, troquei a linguagem e o horario da aplicação
    2-  Aprendi que o manage serve pra controlar a app, dando varios comandos e rodar o servidor. O settings serve pra ajudar as configuração a aplicação. Aprendi os paços para
    iniciar a aplicação

    3- vou fazer a apliação igual as aulas, mas n sei ainda como vou adptar para o sistema. 

                                                                Dia 2 


    1-  As variaveis de ambiente são partes sensiveis do codigo, que vc vai esconder em um arquivo
    e não vai deixar publico, quando vc for postar aquele projeto ou quando vc for manter no Github
    
    2-  Pelo terminal, instalei o dotenv com pip e criei o .env no arquivo principal, coloquei
    a chave lá, como uma variavel de novo SECRET_KEY

    3-  No arquivo settings, onde ficam as configurações, importei o os do pathlib e o
    load_dotenv do dotenv.

    4-  Além de estanciar a load_dotenv()

    5-  A SECRET_KEYdo settings, vai ter dentro dela a variavel que está no outro arquivo,
    assim a secret key vai ta no setting, mas não vai ta visisvel, para fazer isso Preciso
    usar o OS para acessar os arquivos da maquina e l dotenv. 

    6-  Primeiro a SECRET_KEY tem que ser uma string, então vai ficar SECRET_KEY = str()
        Depois usar o os e a função getenv do dotenv SECRET_KEY = str(os.getenv(''))
        Então determinar que variavel vai pegar do .env SECRET_KEY = str(os.getenv('SECRET_KEY'))


                    !!! Do dia 2 dos estudos em diante!!!!  

                                        Dia 03 Atualizando o que vi no dia 02.

    1-  Criei o projeto echos beta no github. 
    2-  Criei o gitignore
    3-  Joguei o site nele. 

    4-  A partir daqui é o que preciso fazer toda vez que atualizar o projeto.
    5-  git init e "git add ."
    6-  git commit -m "primeiro commit"
    7-  git remote add origin https://github.com/AndersonBem/Projeto_Echos_Beta.git
    8-  git push origin master

                                        Dia 05 Atualizando até o dia 04 das anotações
    
    1-  Criei o app "index" pelo terminal, vou tentar colocar a pagina inicial aqui. 
    Não sei bem se é esse o caminho e coloquei no settings.py, na lista de apps intalados,
    coloquei o index. 

                                        Dia 07
                                Preciso atualizar do dia 05 das anotações em diante. 
    1- app/views.py lá vc cria a função que deseja para criar uma route
    Tudo isso fica inutil com o proximo passo:
    {{{{{{{{{{2- setup/urls.py Ai vc avisa ao django que criou essa route e quando deve 
    responder com ela.
        Em app/views.py criei a função:
            def index(request):
                return HttpResponse('<h1>Projeto ECHOS</h>')
        Em setup/urls.py, listei essa função com o path:
            urlpatterns = [
                path('admin/', admin.site.urls),
                path('',index),
            ]
        No path vc diz qual o caminho primeiro, no caso o '' é a route incial, depois a função que quer chamar, além
        de importar essa função. }}}}}}}}}}

                                Isolando as urls. 
    1-  Cada app criado, precisa criar um urls.py, para concentrar todas as routes daquele app. 
        Então importar a função path from django.urls
        Importar tbm a função que quer de app.views 
        Colo no urls de setup, fazer tbm o dicionario de urls, assim:

        urlpatterns = [
            path('',index),
        ]

        Agora vai ficar claro que a aula anterior vc pode pular inteira.
        Em urls.py de setup, vc vai importar o include junto com o path e a função vai ficar assim 
        no dicionario:
             path('',include('index.urls')),

!!!!!!!!!!!!!  A seguencia ficou assim:
            1- Em views.py do app, from django.shortcuts import render
            2- Cria o urls.py no aetup, vc importa o include junto com o path e no dicionario vc cria a path
            da rota com include : path('',include('index.urls')),
            3- Agora em urls.py do app, importa a função da views (index) de app.views
            4- Cria o dicionario urls com o path com a função. 

                                 Templates

    1-  Criei a pasta templates na pasta raiz. 
    2-  Em settings do setup, avisei no templates, dir, que criei essa pasta :  'DIRS': [os.path.join(BASE_DIR,'templates')],
    3-  Alterar o views do app para:
                from django.shortcuts import render


                # Create your views here.

                def index(request):
                    return render(request, 'index/index.html')

                    index/index por causa do proximo item. 

                            carregando o template/ arquivos estáticos
    1-  Criei a pasta index, dentro de templates e coloquei o index.html lá e modifiquei o index.html
    para o codigo que eu quero. 
    2-  em settings.py do setup (pq estou falando pro programa como um todo, não para
    o app especifico) vou criar uma lista dizendo onde vai ficar os arquivos estaticos.
    Irei fazer isso logo apos o STATIC_URL. Primeiro em setup, eu crio um diretorio
    chamado static. Ai no setting.py, faço:
            STATICFILES_DIRS=[
                os.path.join(BASE_DIR, 'setup/static')
            ]

            STATIC_ROOT = os.path.join(BASE_DIR,'static')

    3-  Copiar a pasta assets e styles do projeto para dentro da pasta setup/static ( no caso o projeto tava
    com nome static e templates, copiei a static mudando o nome pra styles e criei a pasta assest vazia) 
    4-  No terminal, usar o comando python manage.py collectstatic para o django organizar
    tudo e criar um novo dir static na base.
    4-  No html, mando ele carregar os arquivos estaticos com {% load static %} logo no começo
    do arquivo.  No html ainda, no href do style, vai ficar assim: href="{% static '/styles/styles.css' %}"
    Assim to avisando  qual o caminho do arquivo estatico que quero usar e o nome dele. Fazer isso tbm com o boot


                        Ultima atualização 
                        Curso Django: Templates e boas práticas.
                      04.03/04 : carregando o template/ arquivos estáticos
                                
                                Dia 11
    1-  Não tenho imagens por enquanto para colocar. 
    2-  Colei dentro de templates/index o html de lista de vet. 
    4-  Em views.py de index, criei a função de lista_veterinarios, ficou esquisita, mas foi
    feito como a aula. 
    5-  Agora vou criar a route dessa função em urls.py de index. Importar e fazer o path.
    6-  O html de lista, tava particionado, desfiz isso e transformei num html inteiro e tirei as 
    coisas de phyton do flask. 
    7-  No path que criei, dei um name para ele. 
    8-  Precisei mudar o stylesheet do html novo para a forma correta.
    9-  Os botões de lista, apaguei os target
    10- Fiz o mesmo pro botão home, de nomear a função e referenciar ela correto.

    1-  Tirar as repetições.
        1-  Criei o base.html em templates.
        2-  Coloquei o começo do html que se repete lá, comecei o base.html com o load static
        3-  Dentro da tag body, logo depois do arquivo que se repete, eu coloquei {% block content %} {% endblock %}
        4-  Nos htmls originais, eu apago o repetido e começo com:
        {% extends 'index/base.html' %}
        {% load static %}
        {% block content %}

        Lembrando de fechar com {% endblock %} 
    
    2- Vou criar os partials  
        1-  Criei o diretorio partials em templates/index
        2-  Criei o _footer.html
        3-  Comecei o html com o load static, colei o que queria e no arquivo base add 
        {% include 'index/partials/_footer.html' %}, além de apagar dos html originais.

    3-  Agora preciso repetir tudo isso pra cada html. 
        1-     
    
                    Todo o primeiro curso atualizado. 

                            Dia algum do futuro do passado
                    Curso Django: persistência de dados e Admin
                                 01.04: Nomes dinâmicos

        1-  Vou criar o dicionario apenas da lista de vet, para treinar. Pq esse modo não é nada pratico,
        então vou alterar ele depois para Banco de Dados.
            1-  criei o dic dados com nome, telefone e emails de alguns exemplos e no render criei o dic veterinarios que contem
        o dic dados.
            2-  No lista_veterinarios eu criei um laço de repetição onde ia ficar os dados dos vets, nesse laço precisa de x e your
        depois coloquei o nome do segundo dic criado anteriormente no laço = veterinarios.items
            3-  No local que queria os dados só precisei colocar info.nome e etc

                
                   Curso Django: persistência de dados e Admin
                                 01.05: Banco de dados    

        1-  Vou precisar criar as 4 classes = vet, paciente, cliente e clinica. 
            1-  Em models.py do index
                1-  Criei as 4 classes.
            2-  No terminal, criei outro terminal e fiz o makemigrations e o migrate criando as tabelas.
    
                    Curso Django: persistência de dados e Admin
                        01.07: Criando dados
        1-  Não vou criar nada pelo terminal, pq acredito que n vai ser feito assim, então posso fazer isso depois caso precise. 
        2   Setup/settings.py  em INSTALLED_APPS = 'index.apps.IndexConfig',

                        CONTINUAR DE =
                            Dia Perdi as contas(Dia 4 do novo curso).
                    Curso Django: persistência de dados e Admin
                        02.02: Acessando o banco de dados

        1-  Vou começar com o de vet e passar para o proximos depois. 
            1- Primeiro vou criar os dados de um vet pelo terminal
            2- Em vieww.py do index, eu vou from index.models import Veterinario 
            3- Dentro da fuc lista_veterinarios: veterinarios = Veterinario.objects.all()
        Isso faz uma variavel com todos os veterinarios do bd lá dentro. 
            4-  No dic que já ta dentro de render, eu coloco essa variavel.
            5-  No html de lista_veterinarios, vou mudar o laço para ele enteder essa nova
        variavel. 
                    {% if veterinarios %}
                    {% for veterinario in veterinarios %} 
                    ...
                    {% endfor %} 
                    {% else %}
                    {% endif %}
            6-  as referencias agora vão ser veterinario.nome e etc

                        Dia Perdi as contas(Dia 6 do novo curso).
                    Curso Django: persistência de dados e Admin
                        02.03: Passando uma referencia 

            1-      Não faz sentido com o projeto.

                        CONTINUAR DE 02.04: DJANGO ADIN
        1-  Criei o superuser Anderson - Senha padrão            
        2-  No admin.py do app, importei do models todos as planilhas do banco.
        3-  Depois registrei todos as planilhas
        4-  No admin.py ainda, vou criar uma classe para organizar o display do admin   
            1-  Feito a classe e distribuido por cada registro de cada planilha.

                         Curso Django: persistência de dados e Admin
                        02.07: Incluindo categoria
        1-  Vou add uma categoria (felino e canino)
            1-  Fazer uma lista de tuplas com as categorias que eu quero DENTRO DA CLASSE. 
                1- categoria = models.CharField(max_length=100,choices=OPCOES_CATEGORIA, defualt="")
                2- Trocei categoria por especie e apaguei o especie antigo,
                3- Migrate 

                        Curso Django: persistência de dados e Admin
                        03.02 : Personalizando o admin
        1-  Add filtro por categoria    
            1-  Em admin.py na class de paciente add
                1-  list_filter = ("especie",)

        2-  1-  list_per_page = 10 em todos

                        Curso Django: persistência de dados e Admin
                        03.03 : Funcionalidade de publicação

        1-  Eu tenho uma opção de publicar ou não, vou tentar fazer para castração
            1-  O models.py:
                1- castracao = models.BooleanField(default=False)

                        Curso Django: persistência de dados e Admin
                        03.04: Incrementando o index
        1-  Add data de criação
            1-  fiz o import do datetime em models.py
            2-  Em todas as classes eu criei:
                data_criacao = models.DateTimeField(default=datetime.now, blank=False)
            3-  não vou por para aparecer no admin
        2-  Não vou ordernar por data, pq quero ordenar por ordem alfabetica
            1-  EX : veterinarios = Veterinario.objects.order_by("nome").all()

                        Curso Django: persistência de dados e Admin
                        04.02 : Novo caminho para as fotos
        1-  Vou fazer um caminho para pacientes para foto, apenas de teste e preparação para as imagens dos laudos
            1-  Em setting.py do setup:
                MEDIA_ROOT = os.path.join(BASE_DIR, "imagem_laudo")

                MEDIA_URL = "/imagem_laudo/"  
            2-  Em urls.py do setup:
                    from django.contrib import admin
                    from django.urls import path, include
                    from django.conf import settings
                    from django.conf.urls.static import static

                    urlpatterns = [
                        path('admin/', admin.site.urls),
                        path('',include('index.urls')),
                    ] + static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)
            3-  No models paciente:
                    foto = models.ImageField(upload_to="fotos/%Y/%m/%d", blank=True)
            4-  Fazer makemigrations
            5-  Corrigir o def __str__

        2-  Pulei as proximas partes, pq ainda n estou exibindo as imagens que guardei, e preciso arrumar um jeito de salvar 
    melhor as imagens, fiz a pergunta no forum, o chat gpeto pareceu bem complexo.



            CONSEGUI 
            criei uma função no começo do models.py:
            def get_upload_path(instance, filename):
                # Obtém o nome do objeto
                nome_objeto = instance.nome
                # Obtém a extensão do arquivo
                extensao = filename.split('.')[-1]
                # Obtém a data atual
                data_atual = datetime.now()
                # Define o caminho de upload como "fotos/nome_objeto/ano/mes/dia/nome_do_arquivo.extensao"
                caminho = os.path.join(nome_objeto, data_atual.strftime('Ano %Y/ Mês %m/ Dia %d'))
                return os.path.join(caminho, f"{filename}.{extensao}")   

            E estanciei foto como:
                foto = models.ImageField(upload_to=get_upload_path, blank=True)
            Assim ele cria o dir imagem_laudos, depois o dir com o nome do objeto, ano e etc

!!!!!!!!!!! Para corrigir a busca:
            1-   pip install psycopg2 e atualizar o pip 
            2-  Pelo pgAdmin 4, criei o banco de dados e vou usar o comando:
                    CREATE EXTENSION unaccent;
            3-  Em settings.py:
                1-  DATABASES = {
                        'default': {
                            'ENGINE': 'django.db.backends.postgresql',
                            'NAME': 'Projeto Echos',
                            'USER': 'postgres',
                            'PASSWORD': 'A101218a@',
                            'HOST': 'localhost',
                            'PORT': '5432',
                        }
                    }
                2-  Em INSTALLED_APPS: 'django.contrib.postgres',

            4-  Migrate
        
        1-  Add no models de paciente:
            1-  def data atual
                def calcular idade
                property
            2-  Mudei o nascimento
            3-  no admin mudei a classe de paciente pra mostrar idade



                                    Curso Django: persistência de dados e Admin
                        05.02 : Funcionalidade de busca

        1-  Logo abaixo dos botões de novo das listas, coloquei
            1-  
          <div class="container">
            <div class="row">
                <div class="col-md-6 offset-md-3">
                    <form class="form-inline" action="">
                        <div class="input-group">
                            <input type="text" class="form-control" name="buscar" placeholder="O que você procura?">
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="submit">
                                    <i class="fas fa-search-location"></i>                                 </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
          </div>
            
            2-  E no html base, coloquei 
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
        
        2-  Em URLs.py do app, eu coloquei:
                path("buscar_paciente", buscar_paciente, name="buscar_paciente"),

            Estou fazendo apenas para paciente primeiro, pq tenho o BD já!

        3-   Em views.py do app:
                def buscar_paciente(request):
                    return render (request, "index/buscar_paciente.html" ) 
        
        4-  No codigo da busca, usar o  <form class="form-inline" action="{% url 'buscar_paciente' %}">

                            Curso Django: persistência de dados e Admin
                        05.03 : View de buscar  

        1-  Copiar dentro dos buscar, as listas.

        2-  def buscar_paciente(request):
    
                pacientes = Paciente.objects.order_by("nome").all()
                
                if "buscar" in request.GET:
                    nome_a_buscar = request.GET['buscar']
                    if nome_a_buscar:
                        pacientes = pacientes.filter(nome__unaccent__icontains=nome_a_buscar)
                
                return render (request, "index/buscar_paciente.html", {"pacientes":pacientes} )


                Curso Django: autenticação de formulários e alerta
                        01.04 : Criando nova app

        1-  


                        
                         


        




        
             




